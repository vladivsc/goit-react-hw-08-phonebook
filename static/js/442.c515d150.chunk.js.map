{"version":3,"file":"static/js/442.c515d150.chunk.js","mappings":"8NAkBA,EAboB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACzBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACGH,EADH,KACWC,GACT,mBAAQG,QAAS,kBAAMF,GAASG,EAAAA,EAAAA,IAAmBN,GAAlC,EAAwCO,KAAK,SAA9D,sBAKL,ECcD,EAzBoB,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,IAQrBC,EALGL,EAASG,QAAO,SAAAG,GAAO,OAC5BA,EAAQb,KAAKc,cAAcC,SAASL,EAAOI,cADf,IAOhC,OACE,wBACuB,IAApBP,EAASS,QACR,mDAEAJ,EAAeK,KAAI,YAA2B,IAAxBlB,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC9B,OAAO,SAAC,EAAD,CAAsBF,GAAIA,EAAIC,KAAMA,EAAMC,OAAQA,GAAhCF,EAC1B,KAIR,E,UCTD,EAhBsB,WACpB,IAAMG,GAAWC,EAAAA,EAAAA,MAKjB,OACE,0BACE,sDAEE,kBAAOe,SAPQ,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBjB,GAASkB,EAAAA,EAAAA,GAAUD,EAAOE,OAC3B,EAKoCf,KAAK,OAAON,KAAK,eAIvD,E,oBCZD,EALqB,CACnBA,KAAM,GACNC,OAAQ,IC2DV,EAnDoB,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,OAEjBmB,EAAAA,EAAAA,YAAU,WACRpB,GAASqB,EAAAA,EAAAA,MACV,GAAE,CAACrB,IAEJ,IAAMsB,EAAe,SAAC,GAAgB,IAAdL,EAAa,EAAbA,OACdnB,EAAgBmB,EAAhBnB,KAAMqB,EAAUF,EAAVE,MACd,OAAQI,EAAazB,GAAQqB,CAC9B,EAYD,OACE,0BACE,iBAAMK,SARW,SAAAC,GAJI,IAAAC,EAKvBD,EAAIE,iBALmBD,GAMN,UAAKH,GALtBvB,GAAS4B,EAAAA,EAAAA,IAAgBF,IAMzBD,EAAIR,OAAOY,OACZ,EAIG,UACE,4BACE,qCACA,kBACEb,SAAUM,EACVlB,KAAK,OACLN,KAAK,OACLgC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAEV,uCACA,kBACEhB,SAAUM,EACVlB,KAAK,MACLN,KAAK,QACLgC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBAAQ5B,KAAK,SAAb,gCAKT,EC5CD,EAXkB,WAChB,OACE,4BACE,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["components/Phonebook/ContactList/ContactItem/ContactItem.jsx","components/Phonebook/ContactList/ContactList.jsx","components/Phonebook/ContactFilter/ContactFilter.jsx","components/Phonebook/ContactForm/initialState.js","components/Phonebook/ContactForm/ContactForm.jsx","components/Phonebook/Phonebook.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { fetchDeleteContact } from 'redux/contacts/contacts-operations';\n\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      {name}: {number}\n      <button onClick={() => dispatch(fetchDeleteContact(id))} type=\"button\">\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\n\nimport { getContacts, getFilter } from 'redux/selectors';\nimport ContactItem from './ContactItem/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const filterContacts = getFilteredContacts();\n\n  return (\n    <ul>\n      {contacts.length === 0 ? (\n        <p>Contacts list is empty!</p>\n      ) : (\n        filterContacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })\n      )}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter-contact/filter-slice';\n\nconst ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n  return (\n    <div>\n      <label>\n        Find contacts by name\n        <input onChange={changeFilter} type=\"text\" name=\"filter\"></input>\n      </label>\n    </div>\n  );\n};\n\nexport default ContactFilter;\n","const initialState = {\n  name: \"\",\n  number: \"\"\n}\n\nexport default initialState;","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport {\n  fetchAllContacts,\n  fetchAddContact,\n} from 'redux/contacts/contacts-operations';\n\nimport initialState from './initialState';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    return (initialState[name] = value);\n  };\n\n  const handleAddContact = data => {\n    dispatch(fetchAddContact(data));\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    handleAddContact({ ...initialState });\n    evt.target.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Name</label>\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <label>Number</label>\n          <input\n            onChange={handleChange}\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <button type=\"submit\">Add contacts</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import ContactList from './ContactList/ContactList';\nimport ContactFilter from './ContactFilter/ContactFilter';\nimport ContactForm from './ContactForm/ContactForm';\n\nconst Phonebook = () => {\n  return (\n    <div>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <ContactFilter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["id","name","number","dispatch","useDispatch","onClick","fetchDeleteContact","type","contacts","useSelector","getContacts","filter","getFilter","filterContacts","contact","toLowerCase","includes","length","map","onChange","target","setFilter","value","useEffect","fetchAllContacts","handleChange","initialState","onSubmit","evt","data","preventDefault","fetchAddContact","reset","pattern","title","required"],"sourceRoot":""}